package GUI.Gestor;

import java.awt.FlowLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import clases.Gestor;
import clases.Paciente;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Juan
 */
public class AñadirPaciente extends javax.swing.JPanel {

	private Gestor gestor;
	private Paciente paciente;
	private TableRowSorter trsFiltro;
	private DefaultTableModel tabla;
	private String[] columnas;

	public AñadirPaciente(Gestor gestor) {
		initComponents();
		this.gestor = gestor;
		actualizarDatos();
		textDNI.setDocument(new JTextFieldLimit(15));
		textNombre.setDocument(new JTextFieldLimit(50));
		textApellidos.setDocument(new JTextFieldLimit(50));
		textSeguro.setDocument(new JTextFieldLimit(50));
		textTelefono.setDocument(new JTextFieldLimit(15));
		textDireccion.setDocument(new JTextFieldLimit(50));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        añadirPaciente = new javax.swing.JPanel();
        tituloPaciente = new javax.swing.JLabel();
        labelDNI = new javax.swing.JLabel();
        textDNI = new javax.swing.JTextField();
        labelNombre = new javax.swing.JLabel();
        textNombre = new javax.swing.JTextField();
        labelApellidos = new javax.swing.JLabel();
        textApellidos = new javax.swing.JTextField();
        labelSeguro = new javax.swing.JLabel();
        textSeguro = new javax.swing.JTextField();
        buttonAñadirPaciente = new javax.swing.JButton();
        DNIOK = new javax.swing.JLabel();
        nombreOK = new javax.swing.JLabel();
        apellidoOK = new javax.swing.JLabel();
        labelTelefono = new javax.swing.JLabel();
        labelDireccion = new javax.swing.JLabel();
        textTelefono = new javax.swing.JTextField();
        textDireccion = new javax.swing.JTextField();
        telefonoOK = new javax.swing.JLabel();
        direccionOK = new javax.swing.JLabel();
        mostrarPacientesExistentes = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaInfo = new javax.swing.JTable();
        textFieldBuscar = new javax.swing.JTextField();
        desplegableColumnas = new javax.swing.JComboBox();
        labelPacientesExistentes = new javax.swing.JLabel();
        actualizarDatos = new javax.swing.JButton();

        tituloPaciente.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tituloPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloPaciente.setText("Añadir nuevo paciente");
        tituloPaciente.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        labelDNI.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelDNI.setText("DNI");

        textDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textDNIKeyReleased(evt);
            }
        });

        labelNombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelNombre.setText("Nombre");

        textNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textNombreKeyReleased(evt);
            }
        });

        labelApellidos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelApellidos.setText("Apellidos");

        textApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textApellidosKeyReleased(evt);
            }
        });

        labelSeguro.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelSeguro.setText("Compañía de seguro");

        buttonAñadirPaciente.setText("Añadir");
        buttonAñadirPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAñadirPacienteActionPerformed(evt);
            }
        });

        DNIOK.setText("rellena dni");

        nombreOK.setText("rellena nombre");

        apellidoOK.setText("rellena apellidos");

        labelTelefono.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelTelefono.setText("Teléfono");

        labelDireccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelDireccion.setText("Dirección");

        textTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textTelefonoKeyReleased(evt);
            }
        });

        textDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textDireccionKeyReleased(evt);
            }
        });

        telefonoOK.setText("rellena teléfono");

        direccionOK.setText("rellena dirección");

        javax.swing.GroupLayout añadirPacienteLayout = new javax.swing.GroupLayout(añadirPaciente);
        añadirPaciente.setLayout(añadirPacienteLayout);
        añadirPacienteLayout.setHorizontalGroup(
            añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(añadirPacienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tituloPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(añadirPacienteLayout.createSequentialGroup()
                        .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(añadirPacienteLayout.createSequentialGroup()
                                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(añadirPacienteLayout.createSequentialGroup()
                                        .addComponent(labelApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(añadirPacienteLayout.createSequentialGroup()
                                        .addComponent(labelSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(apellidoOK))
                            .addGroup(añadirPacienteLayout.createSequentialGroup()
                                .addComponent(labelDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DNIOK))
                            .addGroup(añadirPacienteLayout.createSequentialGroup()
                                .addComponent(labelTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(telefonoOK))
                            .addGroup(añadirPacienteLayout.createSequentialGroup()
                                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buttonAñadirPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(añadirPacienteLayout.createSequentialGroup()
                                        .addComponent(labelDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(direccionOK))
                            .addGroup(añadirPacienteLayout.createSequentialGroup()
                                .addComponent(labelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(nombreOK)))
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );
        añadirPacienteLayout.setVerticalGroup(
            añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(añadirPacienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tituloPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DNIOK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreOK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(apellidoOK)))
                .addGap(18, 18, 18)
                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telefonoOK))
                .addGap(18, 18, 18)
                .addGroup(añadirPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(direccionOK))
                .addGap(18, 18, 18)
                .addComponent(buttonAñadirPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        tablaInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "DNI", "Nombre", "Apellidos", "Seguro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInfo.setColumnSelectionAllowed(true);
        tablaInfo.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tablaInfo);
        tablaInfo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        textFieldBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldBuscarKeyTyped(evt);
            }
        });

        desplegableColumnas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DNI", "Nombre", "Apellidos", "Seguro" }));

        labelPacientesExistentes.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelPacientesExistentes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPacientesExistentes.setText("Pacientes existentes");
        labelPacientesExistentes.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        actualizarDatos.setText("Actualizar datos");
        actualizarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarDatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mostrarPacientesExistentesLayout = new javax.swing.GroupLayout(mostrarPacientesExistentes);
        mostrarPacientesExistentes.setLayout(mostrarPacientesExistentesLayout);
        mostrarPacientesExistentesLayout.setHorizontalGroup(
            mostrarPacientesExistentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostrarPacientesExistentesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mostrarPacientesExistentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(mostrarPacientesExistentesLayout.createSequentialGroup()
                        .addComponent(labelPacientesExistentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(mostrarPacientesExistentesLayout.createSequentialGroup()
                        .addComponent(desplegableColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(textFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(actualizarDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        mostrarPacientesExistentesLayout.setVerticalGroup(
            mostrarPacientesExistentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mostrarPacientesExistentesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPacientesExistentes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mostrarPacientesExistentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desplegableColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(añadirPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mostrarPacientesExistentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mostrarPacientesExistentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(añadirPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Sirve para filtrar en el jTable
	 *
	 * @param evt
	 */
    private void textFieldBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldBuscarKeyTyped
		textFieldBuscar.addKeyListener(new KeyAdapter() {
			public void keyReleased(final KeyEvent e) {
				String cadena = (textFieldBuscar.getText());
				textFieldBuscar.setText(cadena);
				repaint();
				filtro();
			}
		});
		trsFiltro = new TableRowSorter(tablaInfo.getModel());
		tablaInfo.setRowSorter(trsFiltro);
    }//GEN-LAST:event_textFieldBuscarKeyTyped

	/**
	 * Carga un resulSet y lo muestra en la tabla
	 */
	private void actualizarDatos() {
		try {
			ResultSet rs = gestor.mostrarPacientesTodos();
			TableAdaptor aux = new TableAdaptor(rs);
			setTabla(aux.getValue());
			DefaultTableModel tabla = getTabla();
			tablaInfo.setModel(tabla);
			cargarDesplegables();
		} catch (SQLException ex) {
			Logger.getLogger(AñadirPaciente.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * Muestra los pacientes en la jTable para el usuario
	 *
	 * @param evt
	 */
    private void actualizarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarDatosActionPerformed
		actualizarDatos();
    }//GEN-LAST:event_actualizarDatosActionPerformed

	/**
	 * Recoge la informacion del formulario y lo añade a la base de datos
	 *
	 * @param evt
	 */
    private void buttonAñadirPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAñadirPacienteActionPerformed
		Object[] options = {"Si", "No"};
		int confirmar;

		String dni = textDNI.getText().trim();
		String nombre = textNombre.getText().trim();
		String apellidos = textApellidos.getText().trim();
		String compañiaSeguro = textSeguro.getText().trim();
		String telefono = textTelefono.getText().trim();
		String direccion = textDireccion.getText().trim();

		if (estaVacio(compañiaSeguro)) {
			compañiaSeguro = "NULL";
		}

		if (comprobarDNI(dni)) {
			if (comprobarNombre(nombre)) {
				if (comprobarApellido(apellidos)) {
					if (comprobarTelefono(telefono)) {
						if (comprobarDireccion(direccion)) {
							confirmar = JOptionPane.showOptionDialog(this, "Se va ha crear el paciente, ¿desea confirmar la operacion?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
							// Confirmar devuelve un 0 si quiere confirmarlo
							// Devuelve un 1 si no lo confirma
							if (confirmar == 0) {
								String[] paciente = {dni, nombre, apellidos, compañiaSeguro, telefono, direccion};
								if (gestor.addPaciente(paciente)) {
									JOptionPane.showMessageDialog(this, "Se ha añadido el paciente con DNI " + textDNI.getText());
									actualizarDatos();
								} else {
									JOptionPane.showMessageDialog(this, "No se ha podido añadir", "Error", JOptionPane.ERROR_MESSAGE);
								}
							}
						} else {
							JOptionPane.showMessageDialog(this, "Error con la direccion", "Cuidado!", JOptionPane.WARNING_MESSAGE);
						}
					} else {
						JOptionPane.showMessageDialog(this, "Error con el telefono", "Cuidado!", JOptionPane.WARNING_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this, "Error con el apellido", "Cuidado!", JOptionPane.WARNING_MESSAGE);
				}
			} else {
				JOptionPane.showMessageDialog(this, "Error con el nombre", "Cuidado!", JOptionPane.WARNING_MESSAGE);
			}
		} else {
			JOptionPane.showMessageDialog(this, "El dni no es correcto", "Error", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_buttonAñadirPacienteActionPerformed

	/**
	 * Muestra por pantalla si el campo esta o no vacio
	 *
	 * @param evt
	 */
    private void textApellidosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textApellidosKeyReleased
		comprobarApellido(textApellidos.getText());
    }//GEN-LAST:event_textApellidosKeyReleased

	/**
	 * Muestra por pantalla si el campo esta o no vacio
	 *
	 * @param evt
	 */
    private void textNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNombreKeyReleased
		comprobarNombre(textNombre.getText());
    }//GEN-LAST:event_textNombreKeyReleased

	/**
	 * Muestra por pantalla si el campo DNI es correcto
	 *
	 * @param evt
	 */
    private void textDNIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textDNIKeyReleased
		comprobarDNI(textDNI.getText());
    }//GEN-LAST:event_textDNIKeyReleased

	/**
	 * Muestra por pantalla si el campo telefono es correcto
	 *
	 * @param evt
	 */
    private void textTelefonoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTelefonoKeyReleased
		comprobarTelefono(textTelefono.getText());
    }//GEN-LAST:event_textTelefonoKeyReleased

	/**
	 * Muestra por pantalla si el campo direccion es correcto
	 *
	 * @param evt
	 */
    private void textDireccionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textDireccionKeyReleased
		comprobarDireccion(textDireccion.getText());
    }//GEN-LAST:event_textDireccionKeyReleased

	/**
	 * Comprueba si el valor apellido es correcto
	 *
	 * @param campo
	 * @return
	 */
	private boolean comprobarApellido(String apellido) {
		boolean resul = false;
		if (estaVacio(apellido)) {
			apellidoOK.setForeground(Color.red);
			apellidoOK.setText("Vacio!!");
		} else if (!gestor.esTexto(apellido)) {
			apellidoOK.setForeground(Color.red);
			apellidoOK.setText("Incorrecto!!");
		} else {
			apellidoOK.setForeground(Color.green);
			apellidoOK.setText("OK!!");
			resul = true;
		}
		return resul;
	}

	/**
	 * Comprueba si el valor apellido es correcto
	 *
	 * @param campo
	 * @return
	 */
	private boolean comprobarNombre(String nombre) {
		boolean resul = false;
		if (estaVacio(nombre)) {
			nombreOK.setForeground(Color.red);
			nombreOK.setText("Vacio!!");
		} else if (!gestor.esTexto(nombre)) {
			nombreOK.setForeground(Color.red);
			nombreOK.setText("Incorrecto!!");
		} else {
			nombreOK.setForeground(Color.green);
			nombreOK.setText("OK!!");
			resul = true;
		}
		return resul;
	}

	/**
	 * Comprueba el campo DNI
	 *
	 * @return
	 */
	private boolean comprobarDNI(String dni) {
		boolean resul = false;
		try {
			if (estaVacio(dni)) {
				DNIOK.setForeground(Color.red);
				DNIOK.setText("Vacio!!");
			} else if (!gestor.comprobarDNI(dni)) {
				DNIOK.setForeground(Color.red);
				DNIOK.setText("Incorrecto!!");
			} else if (gestor.existePaciente(dni)) {
				DNIOK.setForeground(Color.red);
				DNIOK.setText("Ya existe!!");
			} else {
				DNIOK.setForeground(Color.green);
				DNIOK.setText("OK!!");
				resul = true;

			}
		} catch (SQLException ex) {
			Logger.getLogger(AñadirPaciente.class
					.getName()).log(Level.SEVERE, null, ex);
		}
		return resul;
	}

	/**
	 * Comprueba el telefono
	 *
	 * @return
	 */
	private boolean comprobarTelefono(String telefono) {
		boolean resul = false;
		if (estaVacio(telefono)) {
			telefonoOK.setForeground(Color.red);
			telefonoOK.setText("Vacio!!");
		} else if (!gestor.esNumerico(telefono)) {
			telefonoOK.setForeground(Color.red);
			telefonoOK.setText("Incorrecto!!");
		} else {
			telefonoOK.setForeground(Color.green);
			telefonoOK.setText("OK!!");
			resul = true;
		}
		return resul;
	}

	/**
	 * Comprueba la direccion
	 *
	 * @return
	 */
	private boolean comprobarDireccion(String direccion) {
		boolean resul = false;
		if (estaVacio(direccion)) {
			direccionOK.setForeground(Color.red);
			direccionOK.setText("Vacio!!");
		} else {
			direccionOK.setForeground(Color.green);
			direccionOK.setText("OK!!");
			resul = true;
		}
		return resul;
	}

	/**
	 * Carga el desplegable de paciente a partir de la tabla
	 */
	private void cargarDesplegables() {
		int numColums = tablaInfo.getColumnCount();
		this.columnas = new String[numColums];
		for (int i = 0; i < numColums; i++) {
			this.columnas[i] = tablaInfo.getColumnName(i);
		}
		desplegableColumnas.setModel(new javax.swing.DefaultComboBoxModel(this.columnas));
	}

	/**
	 * Filtro necesario para manejar la informacion
	 */
	public void filtro() {
		int colum = 0;
		while (!(desplegableColumnas.getSelectedItem() == this.columnas[colum])) {
			colum++;
		}
		trsFiltro.setRowFilter(RowFilter.regexFilter(textFieldBuscar.getText(), colum));
	}

	/**
	 * Devuelve true si un stirng esta vacio Funcion equals muy simple, pero
	 * ayuda a que el codigo sea mas sencillo y se vea mejor
	 *
	 * @param texto
	 * @return
	 */
	private boolean estaVacio(String texto) {
		boolean resul = false;
		if (texto.equals("")) {
			resul = true;
		}
		return resul;
	}

	/**
	 * Getter para la tabla
	 *
	 * @return
	 */
	public DefaultTableModel getTabla() {
		return this.tabla;
	}

	/**
	 * Setters para la tabla
	 *
	 * @param tabla
	 */
	public void setTabla(DefaultTableModel tabla) {
		this.tabla = tabla;
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DNIOK;
    private javax.swing.JButton actualizarDatos;
    private javax.swing.JLabel apellidoOK;
    private javax.swing.JPanel añadirPaciente;
    private javax.swing.JButton buttonAñadirPaciente;
    private javax.swing.JComboBox desplegableColumnas;
    private javax.swing.JLabel direccionOK;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelApellidos;
    private javax.swing.JLabel labelDNI;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelPacientesExistentes;
    private javax.swing.JLabel labelSeguro;
    private javax.swing.JLabel labelTelefono;
    private javax.swing.JPanel mostrarPacientesExistentes;
    private javax.swing.JLabel nombreOK;
    private javax.swing.JTable tablaInfo;
    private javax.swing.JLabel telefonoOK;
    private javax.swing.JTextField textApellidos;
    private javax.swing.JTextField textDNI;
    private javax.swing.JTextField textDireccion;
    private javax.swing.JTextField textFieldBuscar;
    private javax.swing.JTextField textNombre;
    private javax.swing.JTextField textSeguro;
    private javax.swing.JTextField textTelefono;
    private javax.swing.JLabel tituloPaciente;
    // End of variables declaration//GEN-END:variables
}

class JTextFieldLimit extends PlainDocument {

	private int limit;

	JTextFieldLimit(int limit) {
		super();
		this.limit = limit;
	}

	JTextFieldLimit(int limit, boolean upper) {
		super();
		this.limit = limit;
	}

	public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
		if (str == null) {
			return;
		}

		if ((getLength() + str.length()) <= limit) {
			super.insertString(offset, str, attr);
		}
	}
}
