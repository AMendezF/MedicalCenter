package GUI.Gestor.Paciente;

import clases.Gestor;
import clases.Paciente;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Juan
 */
public class PedirCita extends javax.swing.JPanel {

	private Gestor gestor;
	private Paciente paciente;

	public PedirCita(Gestor gestor, Paciente paciente) {
		initComponents();
		this.gestor = gestor;
		this.paciente = paciente;
		cargarDatos();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        mostrarDatos = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        labelMedico = new javax.swing.JLabel();
        Especialidad = new javax.swing.JLabel();
        desplegableEspecialidad = new javax.swing.JComboBox();
        desplegableMedico = new javax.swing.JComboBox();
        labelDia = new javax.swing.JLabel();
        labelHora = new javax.swing.JLabel();
        buttonPedirCita = new javax.swing.JButton();
        desplegableHoras = new javax.swing.JComboBox();
        desplegableTurno = new javax.swing.JComboBox();
        Turno = new javax.swing.JLabel();
        calendario = new com.toedter.calendar.JCalendar();
        checkElegirMedico = new javax.swing.JCheckBox();

        jLabel1.setText("jLabel1");

        labelTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitulo.setText("Pedir cita paciente");
        labelTitulo.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        labelMedico.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelMedico.setText("Medico");

        Especialidad.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Especialidad.setText("Especialidad");

        desplegableEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desplegableEspecialidadActionPerformed(evt);
            }
        });

        desplegableMedico.setEnabled(false);

        labelDia.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelDia.setText("Dia");

        labelHora.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelHora.setText("Hora");

        buttonPedirCita.setText("Pedir cita");
        buttonPedirCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPedirCitaActionPerformed(evt);
            }
        });

        desplegableTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desplegableTurnoActionPerformed(evt);
            }
        });

        Turno.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Turno.setText("Turno");

        calendario.setMinSelectableDate(new java.util.Date(-62135769512000L));
        calendario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarioPropertyChange(evt);
            }
        });

        checkElegirMedico.setText("Elegir medico");
        checkElegirMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkElegirMedicoActionPerformed(evt);
            }
        });
        checkElegirMedico.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                checkElegirMedicoPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout mostrarDatosLayout = new javax.swing.GroupLayout(mostrarDatos);
        mostrarDatos.setLayout(mostrarDatosLayout);
        mostrarDatosLayout.setHorizontalGroup(
            mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostrarDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mostrarDatosLayout.createSequentialGroup()
                        .addComponent(labelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(mostrarDatosLayout.createSequentialGroup()
                        .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mostrarDatosLayout.createSequentialGroup()
                                .addComponent(Especialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(desplegableEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelDia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mostrarDatosLayout.createSequentialGroup()
                                    .addComponent(labelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(desplegableHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(mostrarDatosLayout.createSequentialGroup()
                                    .addComponent(labelMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(desplegableMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(mostrarDatosLayout.createSequentialGroup()
                                    .addComponent(Turno, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(desplegableTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(buttonPedirCita, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(checkElegirMedico)
                        .addGap(0, 68, Short.MAX_VALUE))))
        );
        mostrarDatosLayout.setVerticalGroup(
            mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostrarDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mostrarDatosLayout.createSequentialGroup()
                        .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Turno, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desplegableTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desplegableMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkElegirMedico))
                        .addGap(18, 18, 18)
                        .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desplegableHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addComponent(buttonPedirCita, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mostrarDatosLayout.createSequentialGroup()
                        .addGroup(mostrarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Especialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desplegableEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(labelDia, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mostrarDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mostrarDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Carga desplegable especialidad
	 */
	private void cargarDatos() {
		try {
			desplegableEspecialidad.setModel(new DefaultComboBoxModel(gestor.getEspecialidades()));

			Date fechaMinima = calendario.getDate();
			Date fechaMaxima = new Date();
			calendario.setMinSelectableDate(fechaMinima);

			/*
			 calendario.setMaxSelectableDate();
			
			 Calendar date = Calendar.getInstance();
			 date.add(Calendar.MONTH, 1);
			
			
			 calendario.setMaxSelectableDate((date) date);
						
			 int prevDayOfWeekInMonth = date.get(Calendar.DAY_OF_WEEK_IN_MONTH);
			 int prevDayOfWeek = date.get(Calendar.DAY_OF_WEEK);


			 date.set(Calendar.DAY_OF_WEEK, prevDayOfWeek);
			 date.set(Calendar.DAY_OF_WEEK_IN_MONTH, prevDayOfWeekInMonth);
			
			 */
		} catch (SQLException ex) {
			Logger.getLogger(PedirCita.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * Es ejecutado al clickar en pedir cita
	 *
	 * @param evt
	 */
    private void buttonPedirCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPedirCitaActionPerformed

    }//GEN-LAST:event_buttonPedirCitaActionPerformed

	/**
	 * Comprueba los datos y pide una cita
	 */
	private void pedirCita() {
//		List<String> datos = new ArrayList<String>();
//		Object[] options = {"Si", "No"};
//		int confirmar;
//
//		String especialidad = (String) desplegableEspecialidad.getSelectedItem();
//		SimpleDateFormat formato = new SimpleDateFormat("yy-MM-dd");
//		String fecha = formato.format(calendario.getDate());
//		String turno = (String) desplegableTurno.getSelectedItem();
//		String hora = (String) desplegableHoras.getSelectedItem();
//		String medico = "";
//
//		if (desplegableMedico.isEnabled()) {
//			medico = (String) desplegableMedico.getSelectedItem();
//		}
//
//		datos.add(especialidad);
//		datos.add(fecha);
//		datos.add(turno);
//		datos.add(hora);
//		datos.add(medico);
//
//		if (comprobarCita()) {
//			confirmar = JOptionPane.showOptionDialog(this, "Se creara una cita para el paciente, ¿desea confirmar la operacion?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
//			// Confirmar devuelve un 0 si quiere confirmarlo
//			// Devuelve un 1 si no lo confirma
//			if (confirmar == 0) {
//				String[][] datosModificar = datos.toArray(new String[modificarPaciente.size()]);
//				if (gestor.addCita(datos)) {
//					JOptionPane.showMessageDialog(this, "Se ha generado una cita");
//					cargarDatos();
//				} else {
//					JOptionPane.showMessageDialog(this, "No se ha generar la cita", "Error", JOptionPane.ERROR_MESSAGE);
//				}
//			}
//		}
	}

	private boolean comprobarCita() {
		boolean resul = false;

		return resul;
	}

	/**
	 * Recibe un numero del 1 al 7 expresando dias de la semana Devuelve un
	 * string deacuerdo al numero introducido
	 *
	 * @param diaNum
	 * @return
	 */
	private String cogerDia(String diaNum) {
		String diaTexto = "";
		switch (diaNum) {
			case "1":
				diaTexto = "Lunes";
				break;
			case "2":
				diaTexto = "Martes";
				break;
			case "3":
				diaTexto = "Miercoles";
				break;
			case "4":
				diaTexto = "Jueves";
				break;
			case "5":
				diaTexto = "Viernes";
				break;
			case "6":
				diaTexto = "Sabado";
				break;
			case "7":
				diaTexto = "Domingo";
				break;
		}
		return diaTexto;
	}

	/**
	 * Carga el desplegable turno al modificar especialidad o dia
	 */
	private void mostrarTurno() {
		try {
			String especialidad = (String) desplegableEspecialidad.getSelectedItem();
			SimpleDateFormat diaSemanas = new SimpleDateFormat("u");
			String diaSemana = cogerDia(diaSemanas.format(calendario.getDate()));
			desplegableTurno.setModel(new DefaultComboBoxModel(gestor.getHorarioEspecialidadByDay(especialidad, diaSemana)));
			desplegableMedico.setEnabled(false);
			desplegableHoras.setEnabled(false);
			buttonPedirCita.setEnabled(false);
		} catch (SQLException ex) {
			Logger.getLogger(PedirCita.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * Genera una accion al elegir especialidad
	 *
	 * @param evt
	 */
    private void desplegableEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desplegableEspecialidadActionPerformed
		mostrarTurno();

		SimpleDateFormat formato = new SimpleDateFormat("yy-MM-dd");
		SimpleDateFormat diaSemanas = new SimpleDateFormat("u");

		System.out.println(diaSemanas.format(calendario.getDate()));
		System.out.println(formato.format(calendario.getDate()));

		String especialidad = (String) desplegableEspecialidad.getSelectedItem();
		String fecha = formato.format(calendario.getDate());
		String diaSemana = cogerDia(diaSemanas.format(calendario.getDate()));
		System.out.println(calendario.getDate());
		System.out.println(diaSemana);
		try {
			desplegableTurno.setModel(new DefaultComboBoxModel(gestor.getHorarioEspecialidadByDay(especialidad, diaSemana)));
			String turno = (String) desplegableTurno.getSelectedItem();
			//desplegableMedico.setModel(new DefaultComboBoxModel((String) gestor.mostrarMedicosByHorarioEspecialidad(especialidad, turno)));
		} catch (SQLException ex) {
			Logger.getLogger(PedirCita.class.getName()).log(Level.SEVERE, null, ex);
		}

    }//GEN-LAST:event_desplegableEspecialidadActionPerformed

	/**
	 * Detecta el cambio del calendario
	 *
	 * @param evt
	 */
    private void calendarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarioPropertyChange
		mostrarTurno();
    }//GEN-LAST:event_calendarioPropertyChange

	/**
	 * Detecta el cambio de checkbox
	 *
	 * @param evt
	 */
    private void checkElegirMedicoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_checkElegirMedicoPropertyChange
		//activarMedicos();
    }//GEN-LAST:event_checkElegirMedicoPropertyChange

	/**
	 * Si el medico esta habilitado carga medico Si no lo esta carga hora
	 *
	 * @param evt
	 */
    private void desplegableTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desplegableTurnoActionPerformed
		if (cambiarEstadoDesplegableMedicos()){
			
		} else {
			
		}
		if (checkElegirMedico.isEnabled()) {
			desplegableMedico.setEnabled(true);
			//desplegableMedico.setModel(new DefaultComboBoxModel((String) gestor.mostrarMedicosByHorarioEspecialidad(especialidad, turno)));
		} else {
			desplegableHoras.setEnabled(true);
			//desplegableHoras.setModel(new DefaultComboBoxModel(gestor.getConsultasDisponiblesMedico()));
		}

    }//GEN-LAST:event_desplegableTurnoActionPerformed

	/**
	 * 
	 * @return 
	 */
	private boolean desplegableTurnoEventoGenerado(){
		boolean resul = false;
		
		return resul;
	}
	
	/**
	 * Modifica el estado de desplegableMedicos
	 */
	private boolean cambiarEstadoDesplegableMedicos(){
		boolean resul = false;
		if (checkElegirMedico.isSelected()){
			desplegableMedico.setEnabled(true);
			resul = true;
		} else {
			desplegableMedico.setEnabled(false);
		}
		return resul;
	}
	
	/**
	 * Lanza un metodo al cambiar el valor de la checkbox
	 * @param evt 
	 */
    private void checkElegirMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkElegirMedicoActionPerformed
		cambiarEstadoDesplegableMedicos();
    }//GEN-LAST:event_checkElegirMedicoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Especialidad;
    private javax.swing.JLabel Turno;
    private javax.swing.JButton buttonPedirCita;
    private com.toedter.calendar.JCalendar calendario;
    private javax.swing.JCheckBox checkElegirMedico;
    private javax.swing.JComboBox desplegableEspecialidad;
    private javax.swing.JComboBox desplegableHoras;
    private javax.swing.JComboBox desplegableMedico;
    private javax.swing.JComboBox desplegableTurno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelDia;
    private javax.swing.JLabel labelHora;
    private javax.swing.JLabel labelMedico;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JPanel mostrarDatos;
    // End of variables declaration//GEN-END:variables
}
